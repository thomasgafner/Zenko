apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ template "cosmos.rclone.fullname" . }}
  labels:
    component: rclone
    cosmos: {{ .Values.fullnameOverride | default .Release.Name }}
{{ include "cosmos.labels" . | indent 4 }}
spec:
  suspend: {{ .Values.rclone.suspend }}
  schedule: {{ .Values.rclone.schedule | quote }}
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 3600
  successfulJobsHistoryLimit: {{ .Values.rclone.successfulJobsHistory }}
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      backoffLimit: 1
      template:
        metadata:
          labels:
            component: rclone
            cosmos: {{ .Values.fullnameOverride | default .Release.Name }}
{{ include "cosmos.labels" . | indent 12 }}
        spec:
{{- template "cosmos.rclone.job" . }}
{{- define "cosmos.rclone.job" }}
          restartPolicy: OnFailure
          containers:
          - name: {{ .Chart.Name }}
            image: "{{ .Values.rclone.image.repository }}:{{ .Values.rclone.image.tag }}"
            imagePullPolicy: {{ .Values.rclone.image.pullPolicy }}
            env:
              - name: MOUNT_PATH
                value: {{ template "cosmos.src" .Values.rclone.source }}
              - name: RCLONE_CONFIG_DESTINATION_ACCESS_KEY_ID
                valueFrom:
                  secretKeyRef:
                    name: {{ template "cosmos.rclone.dst.secret.name" . }}
                    key: access_key_id
              - name: RCLONE_CONFIG_DESTINATION_SECRET_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    name: {{ template "cosmos.rclone.dst.secret.name" . }}
                    key: secret_access_key
              {{- if not (eq .Values.rclone.source.type "local")}}
              - name: RCLONE_CONFIG_SOURCE_ACCESS_KEY_ID
                valueFrom:
                  secretKeyRef:
                    name: {{ template "cosmos.rclone.src.secret.name" . }}
                    key: access_key_id
              - name: RCLONE_CONFIG_SOURCE_SECRET_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    name: {{ template "cosmos.rclone.src.secret.name" . }}
                    key: secret_access_key
              {{- end }}
            command:
              - rclone
            args:
              - {{ .Values.rclone.command }}
              - source:{{ template "cosmos.src" .Values.rclone.source }}
              - destination:{{ template "cosmos.dst" . }}
              {{- $dst := merge (default .Values.rclone.destination .Values.rclone.remote) .Values.rclone.destination }}
              {{- range $key, $value := .Values.rclone.options }}
              - --{{ $key }}{{ if $value }}={{ $value }}{{ end }}
              {{- end }}
              {{- if .Values.rclone.mdOnly }}
              - --md-only
              {{- end }}
              - -v
            volumeMounts:
              - name: rclone-config
                mountPath: /root/.config/rclone
              - name: backend-storage
                mountPath: {{ template "cosmos.src" . }}
            resources:
{{ toYaml .Values.rclone.resources | indent 14 }}
    {{- with .Values.rclone.nodeSelector }}
          nodeSelector:
{{ toYaml . | indent 12 }}
    {{- end }}
    {{- with .Values.rclone.affinity }}
          affinity:
{{ toYaml . | indent 12 }}
    {{- end }}
    {{- with .Values.rclone.tolerations }}
          tolerations:
{{ toYaml . | indent 12 }}
    {{- end }}
          volumes:
          - name: rclone-config
            configMap:
              name: {{ template "cosmos.rclone.fullname" . }}
          - name: backend-storage
{{- if .Values.persistentVolume.enabled }}
            persistentVolumeClaim:
              claimName: {{ default (include "cosmos.fullname" .) .Values.persistentVolume.existingClaim }}
{{- else }}
            emptyDir: {}
{{- end }}
{{- end -}}
